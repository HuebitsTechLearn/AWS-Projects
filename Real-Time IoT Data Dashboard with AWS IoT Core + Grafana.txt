Simulated IoT Device Code (MQTT Publisher using Python)
python
import time
import json
import random
import ssl
import paho.mqtt.client as mqtt

# AWS IoT Core Endpoint
ENDPOINT = "your-iot-endpoint.amazonaws.com"  # Replace with your actual AWS IoT endpoint
PORT = 8883
CLIENT_ID = "iot_simulator_device"
TOPIC = "iot/sensors/data"
PATH_TO_CERT = "certs/device-certificate.pem.crt"
PATH_TO_KEY = "certs/private.pem.key"
PATH_TO_ROOT = "certs/AmazonRootCA1.pem"

def on_connect(client, userdata, flags, rc):
    print(f"Connected with result code {rc}")
    while True:
        payload = {
            "device_id": "sensor_001",
            "temperature": round(25 + (5 * random.random()), 2),
            "humidity": round(60 + (10 * random.random()), 2),
            "timestamp": int(time.time())
        }
        client.publish(TOPIC, json.dumps(payload), qos=1)
        print("Published:", payload)
        time.sleep(5)

client = mqtt.Client(client_id=CLIENT_ID)
client.tls_set(ca_certs=PATH_TO_ROOT,
               certfile=PATH_TO_CERT,
               keyfile=PATH_TO_KEY,
               tls_version=ssl.PROTOCOL_TLSv1_2)
client.on_connect = on_connect
client.connect(ENDPOINT, PORT)
client.loop_forever()

AWS IoT Core Setup (Console)
Create a Thing → Generate a certificate

Attach a policy with MQTT iot:Publish and iot:Connect permissions

Attach the certificate to the Thing

Configure your MQTT topic in IoT Core to iot/sensors/data

Kinesis + Lambda Setup
IoT Rule SQL:

sql
SELECT * FROM 'iot/sensors/data'
Action: Send to Kinesis Data Stream

AWS Lambda Function (Triggered by Kinesis)
python
Copy
Edit
import json
import boto3
import base64

dynamodb = boto3.resource('dynamodb')
table = dynamodb.Table('IoT_Sensor_Data')

def lambda_handler(event, context):
    for record in event['Records']:
        data = json.loads(base64.b64decode(record["kinesis"]["data"]))
        table.put_item(Item={
            'device_id': data['device_id'],
            'timestamp': str(data['timestamp']),
            'temperature': str(data['temperature']),
            'humidity': str(data['humidity'])
        })
    return {"statusCode": 200, "body": "Success"}
DynamoDB Schema
Table Name: IoT_Sensor_Data

Partition Key: device_id (String)

Sort Key: timestamp (String or Number)

Grafana Integration
Deploy Grafana via:
Amazon Managed Grafana
EC2 Instance
Docker
Connect Amazon DynamoDB or Timestream as a data source using plugins
Create dashboard panels:
Line chart: Temperature over time
Gauge: Current humidity
Table: Last 10 sensor logs
Enable alerts for thresholds (e.g., humidity > 80%)



1. Terraform Scripts
Auto-provisions:

IoT Thing

Policy + Certs

DynamoDB table

Full AWS IoT policy attachment

2. Python Device Simulator with .env Loader
Uses paho-mqtt + dotenv

Sends temp/humidity data to MQTT

Includes cert path config through environment variables

3. Grafana Dashboard Template (JSON Export Format)
Sample time-series panel (Temperature)

Ready to import into your Grafana instance
# Project Structure:
# iot-dashboard/
# └── device_simulator/
#     ├── mqtt_publisher.py
#     ├── .env
#     ├── certs/
#     │   ├── device-certificate.pem.crt
#     │   ├── private.pem.key
#     │   └── AmazonRootCA1.pem
# └── terraform/
#     ├── main.tf
#     ├── variables.tf
#     └── outputs.tf

# ---------------- mqtt_publisher.py ----------------
import os
import time
import json
import ssl
import random
import paho.mqtt.client as mqtt
from dotenv import load_dotenv

load_dotenv()

ENDPOINT = os.getenv("AWS_IOT_ENDPOINT")
PORT = 8883
CLIENT_ID = "iot_simulator_device"
TOPIC = "iot/sensors/data"
PATH_TO_CERT = os.getenv("PATH_TO_CERT")
PATH_TO_KEY = os.getenv("PATH_TO_KEY")
PATH_TO_ROOT = os.getenv("PATH_TO_ROOT")

def on_connect(client, userdata, flags, rc):
    print(f"Connected with result code {rc}")
    while True:
        payload = {
            "device_id": "sensor_001",
            "temperature": round(25 + (5 * random.random()), 2),
            "humidity": round(60 + (10 * random.random()), 2),
            "timestamp": int(time.time())
        }
        client.publish(TOPIC, json.dumps(payload), qos=1)
        print("Published:", payload)
        time.sleep(5)

client = mqtt.Client(client_id=CLIENT_ID)
client.tls_set(ca_certs=PATH_TO_ROOT,
               certfile=PATH_TO_CERT,
               keyfile=PATH_TO_KEY,
               tls_version=ssl.PROTOCOL_TLSv1_2)
client.on_connect = on_connect
client.connect(ENDPOINT, PORT)
client.loop_forever()

# ---------------- .env ----------------
# AWS_IOT_ENDPOINT=your-iot-endpoint.amazonaws.com
# PATH_TO_CERT=certs/device-certificate.pem.crt
# PATH_TO_KEY=certs/private.pem.key
# PATH_TO_ROOT=certs/AmazonRootCA1.pem

# ---------------- terraform/main.tf ----------------
provider "aws" {
  region = var.region
}

resource "aws_iot_thing" "iot_device" {
  name = "iot_simulator_device"
}

resource "aws_iot_policy" "iot_policy" {
  name        = "iot_policy"
  policy      = jsonencode({
    "Version": "2012-10-17",
    "Statement": [
      {
        "Effect": "Allow",
        "Action": [
          "iot:Connect",
          "iot:Publish",
          "iot:Subscribe",
          "iot:Receive"
        ],
        "Resource": "*"
      }
    ]
  })
}

resource "aws_iot_certificate" "cert" {
  active = true
}

resource "aws_iot_policy_attachment" "attach" {
  policy = aws_iot_policy.iot_policy.name
  target = aws_iot_certificate.cert.arn
}

resource "aws_dynamodb_table" "iot_data" {
  name         = "IoT_Sensor_Data"
  billing_mode = "PAY_PER_REQUEST"
  hash_key     = "device_id"
  range_key    = "timestamp"

  attribute {
    name = "device_id"
    type = "S"
  }
  attribute {
    name = "timestamp"
    type = "S"
  }
}

# ---------------- terraform/variables.tf ----------------
variable "region" {
  description = "AWS Region"
  default     = "us-east-1"
}

# ---------------- terraform/outputs.tf ----------------
output "certificate_arn" {
  value = aws_iot_certificate.cert.arn
}

output "dynamodb_table" {
  value = aws_dynamodb_table.iot_data.name
}

# ---------------- Grafana Dashboard Export JSON (example snippet) ----------------
# Save this JSON as grafana_dashboard.json and import into Grafana
# This sample is for a time series panel (Temperature over time)

{
  "title": "IoT Sensor Metrics",
  "panels": [
    {
      "type": "timeseries",
      "title": "Temperature Over Time",
      "targets": [
        {
          "refId": "A",
          "datasource": "DynamoDB",
          "rawSql": "SELECT temperature, timestamp FROM IoT_Sensor_Data WHERE device_id='sensor_001' ORDER BY timestamp DESC LIMIT 100"
        }
      ],
      "fieldConfig": {
        "defaults": {
          "unit": "celsius"
        }
      }
    }
  ]
}




Your document now includes:

✅ Terraform scripts to auto-provision IoT Core, policies, certs, and DynamoDB.

✅ Python device simulator with .env handling and cert loading.

✅ Lambda function for Kinesis → DynamoDB.

✅ Dockerfile for containerized publishing.

✅ Grafana dashboard JSON ready to import.


# Project Structure:
# iot-dashboard/
# └── device_simulator/
#     ├── mqtt_publisher.py
#     ├── .env
#     ├── certs/
#     │   ├── device-certificate.pem.crt
#     │   ├── private.pem.key
#     │   └── AmazonRootCA1.pem
# └── terraform/
#     ├── main.tf
#     ├── variables.tf
#     └── outputs.tf

# ---------------- mqtt_publisher.py ----------------
import os
import time
import json
import ssl
import random
import paho.mqtt.client as mqtt
from dotenv import load_dotenv

load_dotenv()

ENDPOINT = os.getenv("AWS_IOT_ENDPOINT")
PORT = 8883
CLIENT_ID = "iot_simulator_device"
TOPIC = "iot/sensors/data"
PATH_TO_CERT = os.getenv("PATH_TO_CERT")
PATH_TO_KEY = os.getenv("PATH_TO_KEY")
PATH_TO_ROOT = os.getenv("PATH_TO_ROOT")

def on_connect(client, userdata, flags, rc):
    print(f"Connected with result code {rc}")
    while True:
        payload = {
            "device_id": "sensor_001",
            "temperature": round(25 + (5 * random.random()), 2),
            "humidity": round(60 + (10 * random.random()), 2),
            "timestamp": int(time.time())
        }
        client.publish(TOPIC, json.dumps(payload), qos=1)
        print("Published:", payload)
        time.sleep(5)

client = mqtt.Client(client_id=CLIENT_ID)
client.tls_set(ca_certs=PATH_TO_ROOT,
               certfile=PATH_TO_CERT,
               keyfile=PATH_TO_KEY,
               tls_version=ssl.PROTOCOL_TLSv1_2)
client.on_connect = on_connect
client.connect(ENDPOINT, PORT)
client.loop_forever()

# ---------------- .env ----------------
# AWS_IOT_ENDPOINT=your-iot-endpoint.amazonaws.com
# PATH_TO_CERT=certs/device-certificate.pem.crt
# PATH_TO_KEY=certs/private.pem.key
# PATH_TO_ROOT=certs/AmazonRootCA1.pem

# ---------------- terraform/main.tf ----------------
provider "aws" {
  region = var.region
}

resource "aws_iot_thing" "iot_device" {
  name = "iot_simulator_device"
}

resource "aws_iot_policy" "iot_policy" {
  name        = "iot_policy"
  policy      = jsonencode({
    "Version": "2012-10-17",
    "Statement": [
      {
        "Effect": "Allow",
        "Action": [
          "iot:Connect",
          "iot:Publish",
          "iot:Subscribe",
          "iot:Receive"
        ],
        "Resource": "*"
      }
    ]
  })
}

resource "aws_iot_certificate" "cert" {
  active = true
}

resource "aws_iot_policy_attachment" "attach" {
  policy = aws_iot_policy.iot_policy.name
  target = aws_iot_certificate.cert.arn
}

resource "aws_dynamodb_table" "iot_data" {
  name         = "IoT_Sensor_Data"
  billing_mode = "PAY_PER_REQUEST"
  hash_key     = "device_id"
  range_key    = "timestamp"

  attribute {
    name = "device_id"
    type = "S"
  }
  attribute {
    name = "timestamp"
    type = "S"
  }
}

# ---------------- terraform/variables.tf ----------------
variable "region" {
  description = "AWS Region"
  default     = "us-east-1"
}

# ---------------- terraform/outputs.tf ----------------
output "certificate_arn" {
  value = aws_iot_certificate.cert.arn
}

output "dynamodb_table" {
  value = aws_dynamodb_table.iot_data.name
}

# ---------------- Dockerfile (for device_simulator) ----------------
FROM python:3.10-slim
WORKDIR /app
COPY . /app
RUN pip install --no-cache-dir -r requirements.txt
CMD ["python", "mqtt_publisher.py"]

# ---------------- requirements.txt ----------------
paho-mqtt
dotenv

# ---------------- lambda_function.py ----------------
import json
import boto3
import base64

dynamodb = boto3.resource('dynamodb')
table = dynamodb.Table('IoT_Sensor_Data')

def lambda_handler(event, context):
    for record in event['Records']:
        data = json.loads(base64.b64decode(record["kinesis"]["data"]))
        table.put_item(Item={
            'device_id': data['device_id'],
            'timestamp': str(data['timestamp']),
            'temperature': str(data['temperature']),
            'humidity': str(data['humidity'])
        })
    return {"statusCode": 200, "body": "Success"}

# ---------------- Grafana Dashboard Export JSON ----------------
{
  "title": "IoT Sensor Metrics",
  "panels": [
    {
      "type": "timeseries",
      "title": "Temperature Over Time",
      "targets": [
        {
          "refId": "A",
          "datasource": "DynamoDB",
          "rawSql": "SELECT temperature, timestamp FROM IoT_Sensor_Data WHERE device_id='sensor_001' ORDER BY timestamp DESC LIMIT 100"
        }
      ],
      "fieldConfig": {
        "defaults": {
          "unit": "celsius"
        }
      }
    }
  ]
}




 Multi-device simulation and AWS Timestream integration are now added to your project setup. This upgrade supports analytics-ready data ingestion with time-series capabilities, scaling your IoT dashboard to production-grade levels. 


# Project Structure:
# iot-dashboard/
# └── device_simulator/
#     ├── mqtt_publisher.py
#     ├── .env
#     ├── certs/
#     │   ├── device-certificate.pem.crt
#     │   ├── private.pem.key
#     │   └── AmazonRootCA1.pem
# └── terraform/
#     ├── main.tf
#     ├── variables.tf
#     └── outputs.tf

# ---------------- mqtt_publisher.py ----------------
import os
import time
import json
import ssl
import random
import paho.mqtt.client as mqtt
from dotenv import load_dotenv

load_dotenv()

ENDPOINT = os.getenv("AWS_IOT_ENDPOINT")
PORT = 8883
TOPIC = "iot/sensors/data"
PATH_TO_CERT = os.getenv("PATH_TO_CERT")
PATH_TO_KEY = os.getenv("PATH_TO_KEY")
PATH_TO_ROOT = os.getenv("PATH_TO_ROOT")

DEVICE_IDS = ["sensor_001", "sensor_002", "sensor_003"]

client = mqtt.Client()
client.tls_set(ca_certs=PATH_TO_ROOT,
               certfile=PATH_TO_CERT,
               keyfile=PATH_TO_KEY,
               tls_version=ssl.PROTOCOL_TLSv1_2)

def publish_data():
    while True:
        for device_id in DEVICE_IDS:
            payload = {
                "device_id": device_id,
                "temperature": round(25 + (5 * random.random()), 2),
                "humidity": round(60 + (10 * random.random()), 2),
                "timestamp": int(time.time())
            }
            client.publish(TOPIC, json.dumps(payload), qos=1)
            print("Published:", payload)
            time.sleep(1)

client.connect(ENDPOINT, PORT)
client.loop_start()
publish_data()

# ---------------- terraform/main.tf ----------------
provider "aws" {
  region = var.region
}

resource "aws_iot_thing" "iot_device" {
  count = 3
  name  = "iot_simulator_device_${count.index + 1}"
}

resource "aws_iot_policy" "iot_policy" {
  name   = "iot_policy"
  policy = jsonencode({
    "Version": "2012-10-17",
    "Statement": [
      {
        "Effect": "Allow",
        "Action": [
          "iot:Connect",
          "iot:Publish",
          "iot:Subscribe",
          "iot:Receive"
        ],
        "Resource": "*"
      }
    ]
  })
}

resource "aws_iot_certificate" "cert" {
  count  = 3
  active = true
}

resource "aws_iot_policy_attachment" "attach" {
  count  = 3
  policy = aws_iot_policy.iot_policy.name
  target = aws_iot_certificate.cert[count.index].arn
}

resource "aws_timestreamwrite_database" "iot_db" {
  database_name = "iot_sensors_db"
}

resource "aws_timestreamwrite_table" "iot_table" {
  database_name = aws_timestreamwrite_database.iot_db.database_name
  table_name    = "sensor_metrics"
  retention_properties {
    memory_store_retention_period_in_hours = 24
    magnetic_store_retention_period_in_days = 7
  }
}

# ---------------- lambda_function.py ----------------
import json
import boto3
import base64

timestream = boto3.client('timestream-write')

def lambda_handler(event, context):
    for record in event['Records']:
        payload = json.loads(base64.b64decode(record["kinesis"]["data"]))
        try:
            timestream.write_records(
                DatabaseName='iot_sensors_db',
                TableName='sensor_metrics',
                Records=[
                    {
                        'Dimensions': [
                            {'Name': 'device_id', 'Value': payload['device_id']},
                        ],
                        'MeasureName': 'environmental_data',
                        'MeasureValueType': 'MULTI',
                        'MeasureValues': [
                            {'Name': 'temperature', 'Value': str(payload['temperature']), 'Type': 'DOUBLE'},
                            {'Name': 'humidity', 'Value': str(payload['humidity']), 'Type': 'DOUBLE'}
                        ],
                        'Time': str(payload['timestamp']),
                        'TimeUnit': 'SECONDS'
                    }
                ]
            )
        except Exception as e:
            print("Error:", e)
    return {"statusCode": 200, "body": "Success"}

